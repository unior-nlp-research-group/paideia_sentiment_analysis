review <- read.csv(file='review')
testi_full <- review$review_text
sw <- stopwords("it")
tokens_full <- tokenize_words(testi_full)
tokens_full <- unlist(tokens)
tokens_full <- tokens_full[!tokens_full %in% sw]
class(tokens_full)
tokens_full <- tokens_full[!tokens_full %in% sw]
class(tokens_full)
tokens_full
class(tokens_frase)
tokens_frase <- tokenize_words(frasi)
class(tokens_frase)
nrc_table[is.element(nrc_table["Italian-it"], tokens_frase),]
tokens_frase
"molto" %in% tokens_frase
tokens_frase <- unlist(tokens_frase)
tokens_frase <- tokens_frase[!tokens_frase %in% sw]
"molto" %in% tokens_frase
nrc_table[is.element(nrc_table["Italian-it"], tokens_frase),]
tokens_frase
"fiducioso" %in% tokens_frase
nrc_table[nrc_table["Italian-it"] %in% c("abaco")]
nrc_table[nrc_table["Italian-it"] =='abaco']
nrc_table[nrc_table["Italian-it"] %in% 'abaco',]
nrc_table[nrc_table["Italian-it"] %in% c('abaco'),]
nrc_table[is.element(
nrc_table["Italian-it"], c('abaco'))
,]
nrc_table[is.element(
nrc_table["Italian-it"], c('abaco', 'prova'))
,]
nrc_table[is.element(
nrc_table["Italian-it"], c('abaco', 'pessimo'))
,]
?is.element
?is.element('abaco', c('abaco', 'pessimo'))
is.element('abaco', c('abaco', 'pessimo'))
is.element(nrc_table$`Italian-it`, c('abaco', 'pessimo'))
nrc_table[is.element(nrc_table$`Italian-it`, c('abaco', 'pessimo'))]
nrc_table[is.element(nrc_table$`Italian-it`, c('abaco', 'pessimo')),]
class(c('abaco', 'pessimo')))
nrc_table[is.element(
nrc_table["Italian-it"], c('abaco', 'pessimo'))
,]
nrc_table[is.element(nrc_table$`Italian-it`, token_grase),]
nrc_table[is.element(nrc_table$`Italian-it`, token_frase),]
nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]
frase <- c("Sono molto fiducioso per il futuro")
tokens_frase <- tokenize_words(frase)
tokens_frase <- unlist(tokens_frase)
tokens_frase <- tokens_frase[!tokens_frase %in% sw]
nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]
nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]$Arousal
mean(nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]$Arousal=
mean(nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]$Arousal)
nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]
mean(nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]$Valence)
return(mean(nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]$Valence))
calcolare_sentiment_nrc <- function(frase_input){
tokens_frase <- tokenize_words(frase_input)
tokens_frase <- unlist(tokens_frase)
tokens_frase <- tokens_frase[!tokens_frase %in% sw]
nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]
return(mean(nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]$Valence))
}
calcolare_sentiment_nrc("Ho molta paura per il mio futuro")
calcolare_sentiment_nrc <- function(frase_input){
tokens_frase <- tokenize_words(frase_input)
tokens_frase <- unlist(tokens_frase)
tokens_frase <- tokens_frase[!tokens_frase %in% sw]
nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]
return(mean(nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]$Valence))
}
sentiment_values <- lapply(testi_full, calcolare_sentiment_nrc)
head(sentiment_values)
tail(sentiment_values)
length(sentiment_values)
sentiment_by_sentence <- as.data.frame(testi_full, sentiment_values)
sentiment_by_sentence <- as.data.frame(c(testi_full, sentiment_values))
head(sentiment_by_sentence)
sentiment_by_sentence <- data.frame(testi_full, sentiment_values)
nrow(sentiment_by_sentence)
length(testi_full)
ncols(sentiment_by_sentence)
ncol(sentiment_by_sentence)
sentiment_by_sentence <- data.frame(
testi = testi_full,
sentiment = sentiment_values)
calcolare_sentiment_nrc <- function(frase_input){
tokens_frase <- unlist(tokenize_words(frase_input))[!token_frase %in% sw]
return(mean(nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]$Valence))
}
sentiment_values <- lapply(head(testi_full,10), calcolare_sentiment_nrc)
return(mean(nrc_table[is.element(nrc_table$`Italian-it`, tokens_clean),]$Valence))
calcolare_sentiment_nrc <- function(frase_input){
tokens <- unlist(tokenize_words(frase_input))
tokens_clean <- tokens[!tokens %in% sw]
return(mean(nrc_table[is.element(nrc_table$`Italian-it`, tokens_clean),]$Valence))
}
sentiment_values <- lapply(head(testi_full,10), calcolare_sentiment_nrc)
sentiment_values <- lapply(head(testi_full,100), calcolare_sentiment_nrc)
sentiment_values
sentiment_values <- lapply(head(testi_full,1000), calcolare_sentiment_nrc)
sentiment_values <- lapply(testi_full, calcolare_sentiment_nrc)
length(sentiment_values) == lenght(testi_full)
length(sentiment_values) == length(testi_full)
class(sentiment_values)
class(testi_full)
sentiment_values[1]
sentiment_values[2]
sentiment_values <- unlist(sentiment_values)
class(sentiment_values)
testi_full[1]
sentiment_by_sentence <- data.frame(testi_full, sentiment_values)
head(sentiment_by_sentence)
ggplot(data=sentiment_values)+
geom_density()
sentiment_values <- data.frame(unlist(sentiment_values))
head(sentiment_values)
ggplot(data=sentiment_values)+
geom_density()
ggplot(data=sentiment_values)+
geom_density(x=unlist.sentiment_values.)
ggplot(data=sentiment_values)+
geom_density(x=unlist.sentiment_value)
colnames(sentiment_values)
geom_density(x=unlist.sentiment_values.)
geom_density(x=unlist.sentiment_values.)
sentiment_values <- as.data.frame(unlist(sentiment_values))
colnames(sentiment_values)
sentiment_values <- lapply(testi_full, calcolare_sentiment_nrc)
sentiment_values <- as.data.frame(unlist(sentiment_values))
colnames(sentiment_values)
colnames(sentiment_values)
sentiment_values <- unlist(lapply(testi_full, calcolare_sentiment_nrc))
sentiment_values_dataframe <- as.data.frame(values=sentiment_values)
sentiment_values_dataframe <- as.data.frame(sentiment_values)
colnames(sentiment_values_dataframe)
sentiment_values_dataframe
geom_density(x=sentiment_values)
geom_density(aes(x=sentiment_values))
ggplot(data=sentiment_values_dataframe)
ggplot(data=table(sentiment_values_dataframe))+
geom_density(aes(x=sentiment_values))
ggplot(data=as.data.frame(table(sentiment_values_dataframe)))+
geom_density(aes(x=sentiment_values))
colnames(sentiment_values_dataframe)
head(sentiment_values_dataframe)
table(sentiment_values_dataframe)
data.frame(table(sentiment_values_dataframe))
ggplot(data=as.data.frame(table(sentiment_values_dataframe)))+
geom_density(aes(y=Freq))
ggplot(data=as.data.frame(table(sentiment_values_dataframe)))+
geom_density(aes(y=sentiment_values))
ggplot(datasentiment_values_dataframe)+
geom_bar(aes(y=sentiment_values))
sentiment_by_sentence <- data.frame(testi_full, sentiment_values)
ggplot(data=sentiment_values_dataframe)+
geom_bar(aes(y=sentiment_values))
sentiment_values[is.na(sentiment_values)] <- 0
sentiment_values_dataframe <- as.data.frame(sentiment_values)
colnames(sentiment_values_dataframe)
data.frame(table(sentiment_values_dataframe))
ggplot(data=sentiment_values_dataframe)+
geom_bar(aes(y=sentiment_values))
ggplot(data=sentiment_values_dataframe)+
geom_bar(aes(x=seq(nrow(sentiment_values)), y=sentiment_values))
seq(nrow(sentiment_values)
seq(nrow(sentiment_values))
ggplot(data=sentiment_values_dataframe)+
geom_bar(aes(x=seq(from=1, to=nrow(sentiment_values), by=1), y=sentiment_values))
nrow(sentiment_values
nrow(sentiment_values)
nrow(sentiment_values)
ggplot(data=sentiment_values_dataframe)+
geom_bar(aes(x=seq(from=1, to=length(sentiment_values), by=1), y=sentiment_values))
geom_bar(aes(x=seq(from=1, to=length(sentiment_values), by=1))
ggplot(data=sentiment_values_dataframe)+
ggplot(data=sentiment_values_dataframe)+
geom_bar(aes(x=seq(from=1, to=length(sentiment_values), by=1)))
colnames(sentiment_values_dataframe)
sentiment_values_dataframe$index <- seq(
from=1,
to=nrow(sentiment_values_dataframe),
by=1)
colnames(sentiment_values_dataframe)
ggplot(sentiment_values_dataframe, aes(x=index, y=sentiment_values))+
geom_bars(stat='identity', aes(fill=sentiment_values))
ggplot(sentiment_values_dataframe, aes(x=index, y=sentiment_values))+
geom_bar(stat='identity', aes(fill=sentiment_values))
sentiment_values_dataframe <- sentiment_values_dataframe[order(-sentiment_values_dataframe$sentiment_values)]
sentiment_values_dataframe <- sentiment_values_dataframe[order(-sentiment_values_dataframe$sentiment_values),]
sentiment_values_dataframe$index <- seq(
from=1,
to=nrow(sentiment_values_dataframe),
by=1)
colnames(sentiment_values_dataframe)
head(sentiment_values_dataframe)
ggplot(sentiment_values_dataframe, aes(x=index, y=sentiment_values))+
geom_bar(stat='identity', aes(fill=sentiment_values))
ggplot(sentiment_values_dataframe, aes(x=index, y=sentiment_values))+
geom_bar(stat='identity', aes(fill=sentiment_values))+
scale_fill_manual(name='polarity',
labels=c('positivo', 'negativo'),
values = c("above"="#00ba38", "below"="#f8766d"))
ggplot(sentiment_values_dataframe, aes(x=index, y=sentiment_values))+
geom_bar(stat='identity', aes(fill=sentiment_values))+
scale_fill_manual(name='polarity',
labels=c('positivo', 'negativo'),
values = c("positivo"="#00ba38", "negativo"="#f8766d"))
data("mtcars")  # load data
mtcars$`car name` <- rownames(mtcars)  # create new column for car names
mtcars$mpg_z <- round((mtcars$mpg - mean(mtcars$mpg))/sd(mtcars$mpg), 2)  # compute normalized mpg
mtcars$mpg_type <- ifelse(mtcars$mpg_z < 0, "below", "above")  # above / below avg flag
mtcars <- mtcars[order(mtcars$mpg_z), ]  # sort
mtcars$`car name` <- factor(mtcars$`car name`, levels = mtcars$`car name`)
head(mtcars)
ggplot(mtcars, aes(x=`car name`, y=mpg_z, label=mpg_z)) +
geom_bar(stat='identity', aes(fill=mpg_type), width=.5)  +
scale_fill_manual(name="Mileage",
labels = c("Above Average", "Below Average"),
values = c("above"="#00ba38", "below"="#f8766d")) +
labs(subtitle="Normalised mileage from 'mtcars'",
title= "Diverging Bars") +
coord_flip()
ggplot(sentiment_values_dataframe, aes(x=index, y=sentiment_values))+
geom_bar(stat='identity', aes(fill=polarity))+
scale_fill_manual(name='polarity',
labels=c('positivo', 'negativo'),
values = c("positivo"="#00ba38", "negativo"="#f8766d"))
# impostiamo il threshold a 0.5
sentiment_values_dataframe$polarity <- ifelse(
sentiment_values_dataframe$sentiment_values >= 0.5,
"positivo",
"negativo")
ggplot(sentiment_values_dataframe, aes(x=index, y=sentiment_values))+
geom_bar(stat='identity', aes(fill=polarity))+
scale_fill_manual(name='polarity',
labels=c('positivo', 'negativo'),
values = c("positivo"="#00ba38", "negativo"="#f8766d"))
# impostiamo il threshold a 0.5
sentiment_values_dataframe$polarity <- ifelse(
sentiment_values_dataframe$sentiment_values >= 0.6,
"positivo",
"negativo")
ggplot(sentiment_values_dataframe, aes(x=index, y=sentiment_values))+
geom_bar(stat='identity', aes(fill=polarity))+
scale_fill_manual(name='polarity',
labels=c('positivo', 'negativo'),
values = c("positivo"="#00ba38", "negativo"="#f8766d")) +
coord_flip()
stars <- review$review_stars
# impostiamo il threshold a 0.5
sentiment_values_dataframe$polarity <- ifelse(
sentiment_values_dataframe$sentiment_values >= 0.8,
"positivo",
"neutro")
#aggiungiamo un valore neutro
sentiment_values_dataframe$polarity <- ifelse(
sentiment_values_dataframe$sentiment_values >= 0.8,
"positivo",
ifelse(sentiment_values_dataframe$sentiment_values <= 0.3,
"negativo",
"neutro")
)
ggplot(sentiment_values_dataframe, aes(x=index, y=sentiment_values))+
geom_bar(stat='identity', aes(fill=polarity))+
scale_fill_manual(name='polarity',
labels=c('positivo', 'negativo', 'neutro'),
values = c("positivo"="#00ba38",
"negativo"="#f8766d",
"neutro"="#929292")) +
coord_flip()
#aggiungiamo un valore neutro
sentiment_values_dataframe$polarity <- ifelse(
sentiment_values_dataframe$sentiment_values >= 0.6,
"positivo",
ifelse(sentiment_values_dataframe$sentiment_values <= 0.4,
"negativo",
"neutro")
)
ggplot(sentiment_values_dataframe, aes(x=index, y=sentiment_values))+
geom_bar(stat='identity', aes(fill=polarity))+
scale_fill_manual(name='polarity',
labels=c('positivo', 'negativo', 'neutro'),
values = c("positivo"="#00ba38",
"negativo"="#f8766d",
"neutro"="#929292")) +
coord_flip()
#aggiungiamo un valore neutro
sentiment_values_dataframe$polarity <- ifelse(
sentiment_values_dataframe$sentiment_values >= 0.7,
"positivo",
ifelse(sentiment_values_dataframe$sentiment_values <= 0.5,
"negativo",
"neutro")
)
ggplot(sentiment_values_dataframe, aes(x=index, y=sentiment_values))+
geom_bar(stat='identity', aes(fill=polarity))+
scale_fill_manual(name='polarity',
labels=c('positivo', 'negativo', 'neutro'),
values = c("positivo"="#00ba38",
"negativo"="#f8766d",
"neutro"="#929292")) +
coord_flip()
#correlazione tra questa sentiment e le review
sentiment_values_dataframe$stars <- stars
ggplot(sentiment_values_dataframe, aes(x=stars, y=sentiment_values)) +
geom_point()
View(corpus)
library(tidyverse)
library(ggplot2)
library(tokenizers)
library(wordcloud)
library(RColorBrewer)
library(SnowballC)
library(udpipe)
library(stopwords)
library(R.utils)
library(tm)
require(data.table)
review <- read.csv(file='review')
testi_full <- review$review_text
stars <- review$review_stars
sw <- stopwords("it")
tokens_full <- tokenize_words(testi_full)
tokens_full <- unlist(tokens_full)
#link nrc
# http://saifmohammad.com/WebPages/AccessResource.htm
#link sentix
# http://valeriobasile.github.io/twita/downloads.html
#importare lessico esterno
nrc_table <- as.data.frame(
fread('./NRC-VAD-Lexicon-Aug2018Release/OneFilePerLanguage/Italian-it-NRC-VAD-Lexicon.txt'
)
)
head(nrc_table)
#controlliamo i valori di alcune parole esemplificative
nrc_table[nrc_table["Italian-it"] == 'abaco',]$Valence[1]
nrc_table[nrc_table["Italian-it"] == 'perfetto',]$Valence[1]
nrc_table[nrc_table["Italian-it"] == 'pessimo',]$Valence[1]
nrc_table[nrc_table["Italian-it"] == 'fiducioso',]$Valence[1]
#calcoliamo il valore per una frase esemplificativa
frase <- c("Sono molto fiducioso per il futuro")
tokens_frase <- tokenize_words(frase)
tokens_frase <- unlist(tokens_frase)
tokens_frase <- tokens_frase[!tokens_frase %in% sw]
nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]
mean(nrc_table[is.element(nrc_table$`Italian-it`, tokens_frase),]$Valence)
#scriviamo una funzione per calcolare il valore di valenza data una frase
calcolare_sentiment_nrc <- function(frase_input){
tokens <- unlist(tokenize_words(frase_input))
tokens_clean <- tokens[!tokens %in% sw]
return(mean(nrc_table[is.element(nrc_table$`Italian-it`, tokens_clean),]$Valence))
}
sentiment_values <- unlist(lapply(testi_full, calcolare_sentiment_nrc))
sentiment_values[is.na(sentiment_values)] <- 0
sentiment_values_dataframe <- as.data.frame(sentiment_values)
sentiment_values_dataframe <- sentiment_values_dataframe[order(-sentiment_values_dataframe$sentiment_values),]
sentiment_values_dataframe$index <- seq(
from=1,
to=nrow(sentiment_values_dataframe),
by=1)
sentiment_values_dataframe <- sentiment_values_dataframe[order(-sentiment_values_dataframe$sentiment_values),]
sentiment_values_dataframe <- as.data.frame(sentiment_values)
sentiment_values_dataframe <- sentiment_values_dataframe[order(-sentiment_values_dataframe$sentiment_values),]
sentiment_values_dataframe$index <- seq(
from=1,
to=nrow(sentiment_values_dataframe),
by=1)
nrow(sentiment_values_dataframe)
sentiment_values_dataframe
class(sentiment_values_dataframe)
sentiment_values_dataframe$index <- seq(
from=1,
to=length(sentiment_values_dataframe),
by=1)
sentiment_values_dataframe <- as.data.frame(sentiment_values)
sentiment_values_dataframe
sentiment_values_dataframe <- sentiment_values_dataframe[order(-sentiment_values_dataframe$sentiment_values)]
sentiment_values_dataframe <- as.data.frame(sentiment_values)
class(sentiment_values_dataframe)
sentiment_values_dataframe <- sentiment_values_dataframe[order(-sentiment_values_dataframe$sentiment_values),]
class(sentiment_values_dataframe)
sentiment_values_dataframe <- as.data.frame(sentiment_values)
sentiment_values_dataframe <- as.data.frame(
sentiment_values_dataframe[order(-sentiment_values_dataframe$sentiment_values),]
)
class(sentiment_values_dataframe)
sentiment_values_dataframe$index <- seq(
from=1,
to=length(sentiment_values_dataframe),
by=1)
colnames(sentiment_values_dataframe)
head(sentiment_values_dataframe)
sentiment_values_dataframe <- as.data.frame(
sentiment_values_dataframe[order(-sentiment_values_dataframe$sentiment_values),]
)
sentiment_values_dataframe
sentiment_values_dataframe <- as.data.frame(sentiment_values)
sentiment_values_dataframe <- as.data.frame(
sentiment_values_dataframe[order(-sentiment_values_dataframe$sentiment_values),]
)
sentiment_values_dataframe
colnames(sentiment_values_dataframe)
sentiment_values_dataframe <- data.frame(
sentiment_values_dataframe[order(-sentiment_values_dataframe$sentiment_values),]
)
sentiment_values_dataframe$index <- seq(
from=1,
to=length(sentiment_values_dataframe),
by=1)
sentiment_values_dataframe <- as.data.frame(sentiment_values)
sentiment_values_dataframe <- data.frame(
sentiment_values_dataframe[order(-sentiment_values_dataframe$sentiment_values),]
)
colnames(sentiment_values_dataframe)
head(sentiment_values_dataframe)
sentiment_values_dataframe <- as.data.frame(sentiment_values)
colnames(sentiment_values_dataframe)
sentiment_values <- unlist(lapply(testi_full, calcolare_sentiment_nrc))
sentiment_values[is.na(sentiment_values)] <- 0
sentiment_values  <- order(-sentiment_values)
head(sentiment_values)
sentiment_values_dataframe <- as.data.frame(testi_full, sentiment_values)
class(sentiment_values)
class(testi_full)
sentiment_values_dataframe <- as.data.frame(
c(testi_full, sentiment_values)
)
colnames(sentiment_values_dataframe)
sentiment_values_dataframe <- data.frame(
testi_full, sentiment_values
)
colnames(sentiment_values_dataframe)
head(sentiment_values_dataframe)
sentiment_values <- unlist(lapply(testi_full, calcolare_sentiment_nrc))
sentiment_values[is.na(sentiment_values)] <- 0
sentiment_values_dataframe <- data.frame(
testi_full, sentiment_values
)
head(sentiment_values_dataframe)
sentiment_values_dataframe  <- sentiment_values_dataframe[
order(-sentiment_values_dataframe$sentiment_values)
]
sentiment_values_dataframe  <- sentiment_values_dataframe[
order(-sentiment_values_dataframe$sentiment_values)
,]
sentiment_values_dataframe$index <- seq(
from=1,
to=nrow(sentiment_values_dataframe),
by=1)
colnames(sentiment_values_dataframe)
head(sentiment_values_dataframe)
ggplot(sentiment_values_dataframe, aes(x=index, y=sentiment_values))+
geom_bar(stat='identity', aes(fill=sentiment_values))
sentiment_values_dataframe$polarity <- ifelse(
sentiment_values_dataframe$sentiment_values >= 0.7,
"positivo",
ifelse(sentiment_values_dataframe$sentiment_values <= 0.5,
"negativo",
"neutro")
)
ggplot(sentiment_values_dataframe, aes(x=index, y=sentiment_values))+
geom_bar(stat='identity', aes(fill=polarity))+
scale_fill_manual(name='polarity',
labels=c('positivo', 'negativo', 'neutro'),
values = c("positivo"="#00ba38",
"negativo"="#f8766d",
"neutro"="#929292")) +
coord_flip()
#correlazione tra questa sentiment e le review
sentiment_values_dataframe <- data.frame(
testi_full, sentiment_values, stars
)
ggplot(sentiment_values_dataframe, aes(x=stars, y=sentiment_values)) +
geom_point()
errori <- sentiment_values_dataframe[
sentiment_values_dataframe$stars == 1 &
sentiment_values_dataframe$sentiment_values >= 0.25
]
errori <- sentiment_values_dataframe[
sentiment_values_dataframe$stars == 1 &
sentiment_values_dataframe$sentiment_values >= 0.25
,]
errori$testi_full
head(errori)
head(errori$testi_full)
tokens_full[1]
tokens_full_list <- tokenize_words(testi_full)
tokens_full <- unlist(tokens_full_list)
tokens_full_list[1]
#correlazione tra questa sentiment e le review
sentiment_values_dataframe <- data.frame(
testi_full, sentiment_values, stars, tokens_full_list
)
length(testi_full)
length(stars)
length(tokens_full_list)
length(tokens_full_list)
length(sentiment_values)
#correlazione tra questa sentiment e le review
sentiment_values_dataframe <- data.frame(
sentiment_values, stars, tokens_full_list
)
#correlazione tra questa sentiment e le review
sentiment_values_dataframe <- data.frame(
sentiment_values, stars
)
ggplot(sentiment_values_dataframe, aes(x=stars, y=sentiment_values)) +
geom_point()
